{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","username","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchchange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","haserror","error","this","setState","React","Component","App","OnSearchChange","event","target","value","fetch","then","response","json","users","filterrobot","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCHSC,EAbJ,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAKC,EAAuB,EAAvBA,MAAMC,EAAiB,EAAjBA,GAAGC,EAAc,EAAdA,SAC1B,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,cAAcC,IAAG,+BAA0BJ,EAA1B,cACzB,6BACC,4BAAKF,GACL,2BAAIG,GACJ,2BAAIF,MCYMM,EAnBA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAIhB,OACC,6BAECA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OACC,kBAAC,EAAD,CACAC,IAAKD,EACLT,GAAIM,EAAOG,GAAGT,GAAIF,KAAMQ,EAAOG,GAAGX,KAAMG,SAAUK,EAAOG,GAAGR,SAAUF,MAAOO,EAAOG,GAAGV,aCC7EY,EAZE,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC9B,OACC,6BACC,2BAAOX,UAAU,mCACjBY,KAAK,OACLC,YAAY,gBACZC,SAAUH,MCEEI,EARF,SAACC,GACb,OACC,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAO,UAChEJ,EAAMK,WCsBKC,E,YAxBd,WAAYN,GAAO,IAAD,8BACjB,4CAAMA,KACDO,MAAM,CACVC,UAAU,GAHM,E,+EAOAC,GACjBC,KAAKC,SAAS,CAACH,UAAU,M,+BAIzB,OAAGE,KAAKH,MAAMC,SAGZ,6BACC,iDAIIE,KAAKV,MAAMK,a,GArBQO,IAAMC,WCsDnBC,G,kBAhDb,aAAc,IAAD,8BACZ,+CAiBDC,eAAe,SAACC,GACf,EAAKL,SAAS,CAACjB,YAAasB,EAAMC,OAAOC,SAjBzC,EAAKX,MAAM,CACVnB,OAAQ,GACRM,YAAa,IAJF,E,iFAQO,IAAD,OACjByB,MAAM,8CACLC,MAAK,SAAAC,GACL,OAAOA,EAASC,UAEhBF,MAAK,SAAAG,GAAK,OACV,EAAKZ,SAAS,CAACvB,OAAQmC,S,+BAOlB,IAAD,OACDC,EAAYd,KAAKH,MAAMnB,OAAOqC,QAAO,SAAAC,GAC1C,OAAQA,EAAM9C,KAAK+C,cAAcC,SAAS,EAAKrB,MAAMb,YAAYiC,gBAChED,EAAM3C,SAAS4C,cAAcC,SAAS,EAAKrB,MAAMb,YAAYiC,kBAE/D,OAA8B,IAA3BjB,KAAKH,MAAMnB,OAAOyC,OAEb,uCAKN,yBAAK7C,UAAU,MACd,wBAAIA,UAAU,MAAd,iBACA,kBAAC,EAAD,CAAWW,aAAce,KAAKK,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU3B,OAAQoC,W,GAvCPZ,IAAMC,YCAxBiB,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SP4H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,MAAK,SAAAiB,GACjCA,EAAaC,iB","file":"static/js/main.061c9c5d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card=({name,email,id,username}) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma4 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robofriends' src={`https://robohash.org/${id}?200x200`} />\r\n\t\t  <div>\r\n\t\t  \t<h2>{name}</h2>\r\n\t\t  \t<p>{username}</p>\r\n\t\t  \t<p>{email}</p>\r\n\t\t  </div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList=({robots})=>{\r\n// if(true){\r\n// \t\tthrow new Error('Noooo!!!!')\r\n// \t}\r\n\treturn(\t\r\n\t\t<div>\r\n\t\t{\r\n\t\t\trobots.map((user,i) =>{\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\tkey={i}\r\n\t\t\t\t\tid={robots[i].id} name={robots[i].name} username={robots[i].username} email={robots[i].email}/>\r\n\t\t\t\t)\r\n\t\t\t})\r\n\t\t}\r\n\t\t</div>\r\n\t);\t\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox =({searchfield,searchchange})=>{\r\n\treturn (\r\n\t\t<div >\r\n\t\t\t<input className='pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype='text'\r\n\t\t\tplaceholder='search robots'\r\n\t\t\tonChange={searchchange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n\treturn (\r\n\t\t<div style={{overflowY:'scroll', border:'5px solid black', height:'800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\thaserror: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error){\r\n\t\tthis.setState({haserror: true})\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.haserror)\r\n\t\t{\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h1>Ooops. NOT GOOD </h1>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css'\r\n\r\nclass App extends React.Component{\r\n\t\tconstructor(){\r\n\t\t\tsuper()\r\n\t\t\tthis.state={\r\n\t\t\t\trobots: [],\r\n\t\t\t\tsearchfield: ''\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcomponentDidMount(){\r\n\t\t\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t\t.then(response=>{\r\n\t\t\t\t\treturn response.json()\r\n\t\t\t\t})\r\n\t\t\t\t.then(users =>\r\n\t\t\t\t\tthis.setState({robots: users})\r\n\t\t\t\t)\r\n\t\t}\t\t\r\n\r\n\t\tOnSearchChange=(event)=>{\r\n\t\t\tthis.setState({searchfield: event.target.value})\r\n\t\t}\r\n\trender(){\r\n\t\tconst filterrobot=this.state.robots.filter(robot =>{\r\n\t\t\treturn (robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())||\r\n\t\t\t\trobot.username.toLowerCase().includes(this.state.searchfield.toLowerCase()));\r\n\t\t})\r\n\t\tif(this.state.robots.length===0)\r\n\t\t{\r\n\t\t\treturn <h1>LOADING</h1>;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn (\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f1'> ROBOFRIENDS </h1>\r\n\t\t\t\t\t<SearchBox searchchange={this.OnSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t\t<CardList robots={filterrobot} />\r\n\t\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t}\t\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}